#!/bin/bash
{{- if eq .chezmoi.os "darwin" }}

# Kanata Service Setup Script
# Based on real-world working setup instructions
# Requires Karabiner Elements to be installed and configured first

set -euo pipefail

# Colors for output
readonly GREEN='\033[0;32m'
readonly RED='\033[0;31m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m'

log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Service configuration
readonly SERVICE_LABEL="com.derrik.fleming.kanata"
readonly PLIST_SOURCE="{{ .chezmoi.homeDir }}/Library/LaunchDaemons/com.derrik.fleming.kanata.plist"
readonly PLIST_DEST="/Library/LaunchDaemons/com.derrik.fleming.kanata.plist"
readonly KANATA_CONFIG="{{ .chezmoi.homeDir }}/.config/kanata/config.kbd"
readonly KANATA_BIN="{{ if eq .chezmoi.arch "arm64" }}/opt/homebrew{{ else }}/usr/local{{ end }}/bin/kanata"

show_karabiner_setup_instructions() {
    log_info "==================== KARABINER SETUP REQUIRED ===================="
    log_warning "Kanata requires Karabiner Elements to be properly configured first!"
    echo ""
    log_info "Follow these steps:"
    echo ""
    log_info "1. Install Karabiner Elements (NOT just the VirtualHID Driver):"
    log_info "   Download Karabiner-Elements-15.3.0.dmg or later"
    echo ""
    log_info "2. Follow ALL Karabiner prompts to enable in System Settings:"
    log_info "   • Login Items & Extensions > Karabiner-Elements Non-Privileged Agents (enable)"
    log_info "   • Login Items & Extensions > Karabiner-Elements Privileged Daemons (enable)"
    log_info "   • Login Items & Extensions > Driver Extensions > .Karabiner-VirtualHIDDevice-Manager (enable)"
    echo ""
    log_info "3. Enable Input Monitoring permissions for:"
    log_info "   • karabiner_grabber"
    log_info "   • Karabiner-Elements"
    log_info "   • Karabiner-EventViewer"
    log_info "   • Terminal (or your terminal app)"
    log_info "   • kanata (will be added automatically)"
    echo ""
    log_warning "4. IMPORTANT: QUIT Karabiner completely:"
    log_warning "   • Quit the Karabiner app"
    log_warning "   • Quit Karabiner from the menu bar (top of screen)"
    log_warning "   • If you don't do this, Kanata will fail with 'device in use' error"
    echo ""
    log_info "5. Reboot your Mac after configuration"
    echo ""
    log_info "=================================================================="
}

check_karabiner_status() {
    log_info "Checking Karabiner Elements status..."
    
    # Check if Karabiner is installed
    if [[ ! -d "/Applications/Karabiner-Elements.app" ]]; then
        log_error "Karabiner Elements not found in /Applications/"
        return 1
    fi
    log_success "Karabiner Elements found"
    
    # Check if Karabiner processes are running (they should NOT be for Kanata to work)
    local karabiner_processes=(
        "Karabiner-Elements"
        "karabiner_grabber"
        "karabiner_observer"
        "Karabiner-EventViewer"
    )
    
    local running_processes=()
    for process in "${karabiner_processes[@]}"; do
        if pgrep -f "$process" >/dev/null 2>&1; then
            running_processes+=("$process")
        fi
    done
    
    if [[ ${#running_processes[@]} -gt 0 ]]; then
        log_error "Karabiner processes are still running: ${running_processes[*]}"
        log_warning "You must quit ALL Karabiner processes before running Kanata"
        log_info "To quit: killall Karabiner-Elements karabiner_grabber karabiner_observer"
        return 1
    fi
    
    log_success "No conflicting Karabiner processes running"
    return 0
}

check_prerequisites() {
    log_info "Checking prerequisites..."
    
    # Check if kanata is installed
    if [[ ! -f "$KANATA_BIN" ]]; then
        log_error "Kanata not found at $KANATA_BIN"
        log_info "Install with: brew install kanata"
        return 1
    fi
    log_success "Kanata binary found"
    
    # Check if config exists
    if [[ ! -f "$KANATA_CONFIG" ]]; then
        log_error "Kanata config not found at $KANATA_CONFIG"
        log_info "Config should be managed by chezmoi"
        return 1
    fi
    log_success "Kanata config found"
    
    # Validate config (dry run)
    if ! "$KANATA_BIN" --cfg "$KANATA_CONFIG" --dry-run >/dev/null 2>&1; then
        log_error "Kanata config validation failed"
        log_info "Test with: $KANATA_BIN --cfg $KANATA_CONFIG --dry-run"
        return 1
    fi
    log_success "Kanata config is valid"
    
    return 0
}

test_kanata_manually() {
    log_info "Testing Kanata manually first..."
    log_warning "This will run Kanata in the foreground for 5 seconds"
    log_info "Press Ctrl+C if you see any errors"
    
    # Test run for 5 seconds
    timeout 5s sudo "$KANATA_BIN" --cfg "$KANATA_CONFIG" || {
        local exit_code=$?
        if [[ $exit_code -eq 124 ]]; then
            log_success "Manual test completed successfully (timeout expected)"
            return 0
        else
            log_error "Manual test failed with exit code $exit_code"
            return 1
        fi
    }
}

install_service() {
    log_info "Installing Kanata service..."
    
    # Check if plist source exists (managed by chezmoi)
    if [[ ! -f "$PLIST_SOURCE" ]]; then
        log_error "Service plist not found at $PLIST_SOURCE"
        log_info "This should be managed by chezmoi"
        return 1
    fi
    
    # Copy plist to system location (requires sudo)
    if sudo cp "$PLIST_SOURCE" "$PLIST_DEST" 2>/dev/null; then
        log_success "Service plist installed"
    else
        log_error "Failed to install service plist (requires sudo)"
        return 1
    fi
    
    # Set correct permissions
    sudo chmod 644 "$PLIST_DEST"
    sudo chown root:wheel "$PLIST_DEST"
    
    return 0
}

manage_service() {
    local action="$1"
    
    case "$action" in
        "load")
            if sudo launchctl load "$PLIST_DEST" 2>/dev/null; then
                log_success "Service loaded"
            else
                log_warning "Service may already be loaded"
            fi
            ;;
        "start")
            if sudo launchctl start "$SERVICE_LABEL" 2>/dev/null; then
                log_success "Service started"
            else
                log_warning "Service may already be running"
            fi
            ;;
        "stop")
            if sudo launchctl stop "$SERVICE_LABEL" 2>/dev/null; then
                log_success "Service stopped"
            else
                log_warning "Service may not be running"
            fi
            ;;
        "unload")
            if sudo launchctl unload "$PLIST_DEST" 2>/dev/null; then
                log_success "Service unloaded"
            else
                log_warning "Service may not be loaded"
            fi
            ;;
        *)
            log_error "Unknown action: $action"
            return 1
            ;;
    esac
}

check_service_status() {
    log_info "Checking service status..."
    
    if sudo launchctl list | grep -q "$SERVICE_LABEL"; then
        local status=$(sudo launchctl list | grep "$SERVICE_LABEL" | awk '{print $1}')
        if [[ "$status" == "0" ]]; then
            log_success "Service is running (PID: $(sudo launchctl list | grep "$SERVICE_LABEL" | awk '{print $2}'))"
        else
            log_warning "Service loaded but may have issues (exit code: $status)"
        fi
        
        # Check if process is actually running
        if pgrep -f kanata >/dev/null 2>&1; then
            log_success "Kanata process is running"
        else
            log_warning "Service loaded but kanata process not found"
        fi
    else
        log_warning "Service not loaded"
        return 1
    fi
}

main() {
    log_info "Setting up Kanata keyboard remapping service..."
    
    # Check if we're on macOS
    if [[ "$(uname)" != "Darwin" ]]; then
        log_error "This script is only for macOS"
        exit 1
    fi
    
    # Show Karabiner setup instructions first
    show_karabiner_setup_instructions
    
    # Check if running interactively
    if [[ -t 0 ]]; then
        # Interactive mode - ask user
        read -p "Have you completed the Karabiner Elements setup above? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log_info "Please complete Karabiner Elements setup first, then run this script again"
            exit 0
        fi
    else
        # Non-interactive mode - skip setup for now
        log_warning "Running in non-interactive mode - skipping Kanata service setup"
        log_info "To set up Kanata service later, run: ~/scripts/setup-kanata-service.sh"
        exit 0
    fi
    
    # Check Karabiner status
    if ! check_karabiner_status; then
        log_error "Karabiner check failed - please review and fix issues above"
        exit 1
    fi
    
    # Check prerequisites
    if ! check_prerequisites; then
        log_error "Prerequisites not met"
        exit 1
    fi
    
    # Test Kanata manually first
    if ! test_kanata_manually; then
        log_error "Manual test failed - service installation aborted"
        exit 1
    fi
    
    # Check if service is already installed and running
    if sudo launchctl list | grep -q "$SERVICE_LABEL"; then
        log_info "Service already exists, checking if update needed..."
        
        # Compare plist files to see if update needed
        if ! diff -q "$PLIST_SOURCE" "$PLIST_DEST" >/dev/null 2>&1; then
            log_info "Service configuration changed, updating..."
            manage_service "stop"
            manage_service "unload"
            install_service
            manage_service "load"
            manage_service "start"
        else
            log_info "Service is up to date"
            check_service_status
            exit 0
        fi
    else
        # Fresh installation
        log_info "Installing service for the first time..."
        install_service
        manage_service "load"
        manage_service "start"
    fi
    
    # Final status check
    sleep 3  # Give service time to start
    if check_service_status; then
        log_success "Kanata service setup complete!"
        log_info "View logs with: tail -f /var/log/kanata.log"
        log_info "View errors with: tail -f /var/log/kanata.error.log"
    else
        log_error "Service setup may have issues - check logs for details"
        exit 1
    fi
}

# Error handling
trap 'log_error "Script failed at line $LINENO"' ERR

# Run main function
main "$@"

{{- end }}